[tox]
# https://devguide.python.org/versions/#supported-versions
envlist = py{37,38,39,310,311}
# https://tox.wiki/en/latest/example/package.html#setuptools
isolated_build = True

[testenv]
description = Run tests and checks for code and content
extras = devel
deps = -rrequirements/{envname}/devel.txt
commands =
# Fail fast.  Run quick tests and checks first to save time in the inner loop of
# development iteration.
    pyroma --min="10" "./"
    black --check "./src/pythonprojectstructure/"
# https://pawamoy.github.io/posts/python-static-code-analysis-tools/#prospector
    prospector \
        --output-format "emacs:{envdir}/prospector.emacs" \
        --output-format "grouped:{envdir}/prospector.grouped" \
        --output-format "json:{envdir}/prospector.json" \
        --output-format "pylint:{envdir}/prospector.pylint" \
        --output-format "text:{envdir}/prospector.text" \
        --output-format "vscode:{envdir}/prospector.vscode" \
        --output-format "xunit:{envdir}/prospector.xunit" \
        --output-format "yaml:{envdir}/prospector.yaml" \
        --output-format "grouped" \
        "./src/pythonprojectstructure/"
# https://xenon.readthedocs.io/en/latest/#an-actual-example
    xenon --max-absolute "A" --max-modules "A" --max-average "A" \
        "./src/pythonprojectstructure/"
# Many developers find pylint to be too opinionated.  For myself, I find it imensely
# helpful to keep me from being lazy, particularly when it comes to how I structure and
# factor my code.  The line below will cause failures in the commit/push hooks and in CI
# for any errors or warnings throughout the code base (excepting configuration or
# comments that exclude specific code).  Comment out or delete if Pylint isn't to your
# liking.
    rstcheck -r "./README.rst" "./CONTRIBUTING.rst" "./TODO.rst" \
        "./src/pythonprojectstructure/"
# Ensure this package is correctly installed into this environment.
    python -c 'import pythonprojectstructure; print(pythonprojectstructure)'
# Run more time consuming tests and checks last.
    coverage run --data-file="{envdir}/.coverage" -m pytest \
        --junit-xml="{envdir}/pytest-junit.xml" -s
    coverage json --fail-under=0 --data-file="{envdir}/.coverage" \
        -o "{envdir}/coverage.json"
    coverage lcov --fail-under=0 --data-file="{envdir}/.coverage" \
        -o "{envdir}/coverage.lcov"
    coverage xml --fail-under=0 --data-file="{envdir}/.coverage" \
        -o "{envdir}/coverage.xml"
    coverage html --fail-under=0 --data-file="{envdir}/.coverage" \
        -d "{envdir}/htmlcov"
    coverage report --data-file="{envdir}/.coverage"

[testenv:build]
description = Independent build, release, devel tools (requires PYTHON_HOST_ENV)
skip_install = true
# Workaround an issue with `skip_install` and passing in the `--installpkg` CLI option:
# https://github.com/tox-dev/tox/issues/2442#issuecomment-1347549575
package_env =
deps = -rrequirements/{env:PYTHON_HOST_ENV}/build.txt
commands =
