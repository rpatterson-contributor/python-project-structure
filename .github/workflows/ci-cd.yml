name: "Run linter, tests and, and release"

on: ["push"]

jobs:

  ci-cd:
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:

      # Global set up

      - name: "Checkout source from VCS"
        uses: "actions/checkout@master"
        with:
          fetch-depth: 0

      - name: "Add user installs to PATH"
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Cache build artifacts to speed up CI runs

      - name: "Cache Docker build cache"
        # Don't use any cache for the final release to expose any clean build issues
        # before final releases are published.
        if: "github.ref != 'refs/heads/master'"
        uses: "actions/cache@master"
        env:
          # Increment to force clearing the cache
          cache-name: "docker-build-v1"
        with:
          path: |
            /var/lib/docker
          # Never get a cache hit to force always caching the current build cache
          key: "${{ env.cache-name }}-${{ runner.os }}-${{ matrix.python-version }}-${{ github.sha }}"
          # Always re-use the cache and then update
          restore-keys: "${{ env.cache-name }}-${{ runner.os }}-${{ matrix.python-version }}-"

      - name: "Cache tox virtual environments"
        if: "github.ref != 'refs/heads/master'"
        uses: "actions/cache@master"
        env:
          # Increment to force clearing the cache
          cache-name: "tox-v1"
        with:
          path: |
            ~/.local
            ./.tox
            ./.tox-*
            ./var/log
          # Never get a cache hit to force always caching any upgraded dependencies
          # Use hashFiles to force venv recreation when dependencies change
          key: >-
            ${{ env.cache-name }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.*') }}-${{ hashFiles('setup.*') }}-${{ hashFiles('tox.ini') }}-${{ github.sha }}
          # Always re-use the cache and then upgrade
          restore-keys: >-
            ${{ env.cache-name }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.*') }}-${{ hashFiles('setup.*') }}-${{ hashFiles('requirements*.txt') }}-${{ hashFiles('tox.ini') }}-

      # Delegate the rest to the `./Makefile` to keep as much portable between CI
      # platforms

      - name: "Build the container image in which to run the tests"
        run: "make build-docker"

      - name: "Run the tests and code checks inside the built container"
        run: "make test-docker"

      # Upload build artifacts
      # https://github.com/actions/upload-artifact#usage

      - name: "Archive test suite reports"
        uses: "actions/upload-artifact@master"
        with:
          name: "test-suite-reports"
          path: |
            pytest*
      # https://github.com/marketplace/actions/test-reporter#example
      - name: "Publish test suite report"
        uses: "dorny/test-reporter@main"
        if: "success() || failure()"    # run this step even if previous step failed
        with:
          name: "PyTest Test Suite"
          path: |
            pytest-junit.xml
          reporter: "java-junit"

      - name: "Archive code coverage reports"
        uses: "actions/upload-artifact@master"
        with:
          name: "code-coverage-reports"
          path: |
            coverage*
            htmlcov
      # https://github.com/marketplace/actions/codecov#usage
      - name: "Publish code coverage report"
        uses: "codecov/codecov-action@main"
        with:
          files: |
            coverage.xml
          fail_ci_if_error: true

      - name: "Archive linter reports"
        uses: "actions/upload-artifact@master"
        with:
          name: "linter-reports"
          path: |
            pylint*

      # Release and publish

      - name: "Bump version and publish release artifacts if on `master`/`develop`"
        run: "make release"
        env:
          # Requires the secrets to be added to GitHub either through the web UI or the
          # GitHub CLI tool:
          # https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          TEST_PYPI_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}

      # https://github.com/softprops/action-gh-release#-external-release-notes
      - name: "Create GitHub Release"
        uses: "softprops/action-gh-release@master"
        if: "github.ref == 'refs/heads/master'"
        with:
          files: |
            dist/*
          body_path: "NEWS.rst"

      # TODO: Push container image to GHCR? I don't currently need this but I can easily
      #       imagine the value in it.
