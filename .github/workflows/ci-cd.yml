name: "Run linter, tests and, and release"

on: ["push"]

jobs:

  ci-cd:
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:

      # VCS set up

      - uses: "actions/checkout@master"
        with:
          fetch-depth: 0

      # Cache build artifacts to speed up CI runs

      - name: "Cache Docker build cache"
        # Don't use any cache for the final release to expose any clean build issues
        # before final releases are published.
        if: "github.ref != 'refs/heads/master'"
        uses: "actions/cache@master"
        env:
          # Increment to force clearing the cache
          cache-name: "docker-build-v1"
        with:
          path: "/var/lib/docker"
          # Never get a cache hit to force always caching the current build cache
          key: "${{ env.cache-name }}-${{ runner.os }}-${{ matrix.python-version }}-${{ github.sha }}"
          # Always re-use the cache and then update
          restore-keys: "${{ env.cache-name }}-${{ runner.os }}-${{ matrix.python-version }}-"

      - name: "Cache tox virtual environments"
        if: "github.ref != 'refs/heads/master'"
        uses: "actions/cache@master"
        env:
          # Increment to force clearing the cache
          cache-name: "tox-v1"
        with:
          path:
            - "./.tox"
            - "./.tox-*"
          # Never get a cache hit to force always caching any upgraded dependencies
          # Use hashFiles to force venv recreation when dependencies change
          key: >-
            ${{ env.cache-name }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.*') }}-${{ hashFiles('setup.*') }}-${{ hashFiles('tox.ini') }}-${{ github.sha }}
          # Always re-use the cache and then upgrade
          restore-keys: >-
            ${{ env.cache-name }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.*') }}-${{ hashFiles('setup.*') }}-${{ hashFiles('requirements*.txt') }}-${{ hashFiles('tox.ini') }}-

      # Delegate the rest to the `./Makefile` to keep as much portable between CI
      # platforms

      - name: "Build the container image in which to run the tests"
        run: "make build-docker"

      - name: "Run the tests and code checks inside the built container"
        run: "make test-docker"

      - name: "Bump version and publish release artifacts if on `master`/`develop`"
        run: "make release"
